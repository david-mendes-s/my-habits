// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(uuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  sequence      Int        @default(0)
  accounts      Account[]
  sessions      Session[]
  habits        Habit[]
  progress      Progress[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Habit {
  id          String          @id @default(uuid())
  title       String
  description String?
  userId      String
  created_at  DateTime
  user        User            @relation(fields: [userId], references: [id])
  DayHabit    DayHabit[]
  weekDays    HabitWeekDays[]
}

model Day {
  id       String     @id @default(uuid())
  date     String
  DayHabit DayHabit[]
}

model DayHabit {
  id        String  @id @default(uuid())
  habit_id  String
  day_id    String
  completed Boolean @default(false)

  habit Habit @relation(fields: [habit_id], references: [id])
  day   Day   @relation(fields: [day_id], references: [id])
}

model HabitWeekDays {
  id       String @id @default(uuid())
  habit_id String
  week_day Int

  habit Habit @relation(fields: [habit_id], references: [id])

  @@unique([habit_id, week_day])
  @@map("habit_week_days")
}

model Progress {
  id                   String @id @default(uuid())
  userId               String
  progress_habit       Int
  week_day             Int
  date_completed_habit String
  possibleHabitsDay    Int
  habitsCompleteds     Int
  user                 User   @relation(fields: [userId], references: [id])
}

model IncompleteHabit {
  id              String   @id @default(uuid())
  habit_id        String
  userId          String
  title           String
  date_created_at DateTime
  date_incomplete String

  @@unique([habit_id, date_incomplete])
}
